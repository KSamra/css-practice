
.row {
  //1140px is a popular modern choice for max width of a grid.
  max-width: $grid-width; //114rem is equivalent to 1140px in our case. since root pixel size is 10px.

  // shortcut for center block elements within another block element.
  margin: 0 auto;

  // apply the vertical gutter spacing to every child element except the last-child.
  &:not(:last-child){
    margin-bottom: $gutter-vertical;

    // @include respond(tab-port) {
    //   margin-right: $gutter-vertical-small;
    // }
  }

  @include respond(tab-port) {
    max-width: 50rem;
    padding: 0 3rem;
  }

  @include clearfix;

  //selects all elements that have a class name beginning with "col-"
  [class^="col-"] {
    float: left;
    
    //apply a right margin to all but the last child in each row.
    &:not(:last-child) {
      margin-right: $gutter-horizontal;

      @include respond(tab-port) {
        margin-right: 0;
        margin-bottom: $gutter-vertical-small;
      }
    }

    @include respond(tab-port) {
      width: 100% !important;
    }
  }

  .col-1-of-2 {
    // there are two columns in this row type. Each column has the following width:
    // 100% of the rows width - (gutter space) / 2
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - (2 * #{$gutter-horizontal})) / 3);
  }

  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }

  .col-2-of-3 {
    width: calc((2 * ((100% - 2 * #{$gutter-horizontal}) / 3)) + #{$gutter-horizontal});
  }

  .col-2-of-4 {
    width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
  }

  .col-3-of-4 {
    width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
  }
}

